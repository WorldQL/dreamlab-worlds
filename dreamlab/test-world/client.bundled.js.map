{
  "version": 3,
  "sources": ["client.ts", "https://deno.land/std@0.213.0/assert/assertion_error.ts", "util.ts"],
  "sourcesContent": ["import type { Game } from \"@dreamlab.gg/core\"\nimport { isEntity } from \"@dreamlab.gg/core\"\n\nimport { AssertionError } from \"https://deno.land/std@0.213.0/assert/assertion_error.ts\"\n\nimport { myUtilFunction, utilThrowAnError } from \"./util.ts\"\nimport { waitForPlayer } from \"@dreamlab.gg/core/utils\"\n\nexport const init = async (_game: Game<false>) => {\n  console.log(\"Hello from init()!\")\n  myUtilFunction()\n\n  const player = await waitForPlayer()\n  if (!isEntity(player)) throw new AssertionError(\"player is somehow not an entity\")\n  console.log(\"got player!!\")\n\n  console.log(\"Here comes an error:\")\n  utilThrowAnError()\n}\n", "// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n\n/**\n * Error thrown when an assertion fails.\n *\n * @example\n * ```ts\n * import { AssertionError } from \"https://deno.land/std@$STD_VERSION/assert/assertion_error.ts\";\n *\n * throw new AssertionError(\"Assertion failed\");\n * ```\n */\nexport class AssertionError extends Error {\n  /** Constructs a new instance. */\n  constructor(message: string) {\n    super(message);\n    this.name = \"AssertionError\";\n  }\n}\n", "export const myUtilFunction = () => {\n  console.log(\"hello from the util function\")\n}\n\nexport const utilThrowAnError = () => {\n  throw new Error(\"this is an error from the util module\")\n}\n"],
  "mappings": ";AACA,SAAS,gBAAgB;;;ACWlB,IAAM,iBAAN,cAA6B,MAAM;AAAA;AAAA,EAExC,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EACd;AACF;;;AClBO,IAAM,iBAAiB,MAAM;AAClC,UAAQ,IAAI,8BAA8B;AAC5C;AAEO,IAAM,mBAAmB,MAAM;AACpC,QAAM,IAAI,MAAM,uCAAuC;AACzD;;;AFAA,SAAS,qBAAqB;AAEvB,IAAM,OAAO,OAAO,UAAuB;AAChD,UAAQ,IAAI,oBAAoB;AAChC,iBAAe;AAEf,QAAM,SAAS,MAAM,cAAc;AACnC,MAAI,CAAC,SAAS,MAAM;AAAG,UAAM,IAAI,eAAe,iCAAiC;AACjF,UAAQ,IAAI,cAAc;AAE1B,UAAQ,IAAI,sBAAsB;AAClC,mBAAiB;AACnB;",
  "names": []
}
