{
  "version": 3,
  "sources": ["client.ts", "assetLoader.ts", "entities/particleSpawner.ts", "events.ts", "inventory/inventoryManager.ts", "entities/regionManager.ts", "entities/spawnable/grappleHook.ts", "entities/spawnable/inventoryItem.ts", "entities/spawnable/spawnRegion.ts", "entities/spawnable/zombie.ts", "shared.ts", "ui/startScreen.tsx", "inventory/inventoryApp.tsx", "inventory/inventorySlot.tsx", "inventory/inventoryStyle.ts", "inventory/inventory.tsx", "inventory/inventoryHotbar.tsx", "inventory/listeners/inventoryClick.ts", "inventory/listeners/inventoryDrag.ts", "ui/gameScreen.tsx", "playerDataManager.ts", "ui/deathScreen.tsx", "ui/styles.ts", "ui/itemPopup.tsx"],
  "sourcesContent": ["import { deferUntilPlayer } from \"@dreamlab.gg/core/dist/utils\";\nimport type { InitClient } from \"@dreamlab.gg/core/sdk\";\nimport { preloadAssets } from \"./assetLoader.ts\";\nimport { sharedInit } from \"./shared.ts\";\nimport { initializeUI } from \"./ui/startScreen.tsx\";\n\nexport const init: InitClient = async (game) => {\n  await preloadAssets();\n  initializeUI(game);\n  deferUntilPlayer(async (player) => {\n    const spawnpoints = game.queryTags(\"any\", [\"spawnpoint\"]);\n    if (spawnpoints.length > 0) {\n      const spawn = spawnpoints[Math.floor(Math.random() * spawnpoints.length)];\n      if (spawn) player.teleport(spawn.transform.position, true);\n    }\n\n    player.characterId = \"c_y9ydqx2pghxl04emgnxu6r5g\";\n  });\n\n  await sharedInit(game);\n};\n", "import { resolve } from '@dreamlab.gg/core/dist/sdk'\nimport { loadPlayerSpritesheet } from '@dreamlab.gg/core/dist/textures'\nimport type { Texture } from 'pixi.js'\n\ninterface PreloadedAssets {\n  walkTextures: Texture[]\n  recoilTextures: Texture[]\n  punchTextures: Texture[]\n}\n\nlet preloadPromise: Promise<PreloadedAssets> | null = null\nlet preloadedAssets: PreloadedAssets | null = null\n\nexport async function preloadAssets(): Promise<PreloadedAssets> {\n  if (preloadedAssets) {\n    return preloadedAssets\n  }\n\n  if (!preloadPromise) {\n    preloadPromise = (async () => {\n      const spritesheetWalk = await loadPlayerSpritesheet(\n        resolve('world://animations/z1walk.json'),\n      )\n      const spritesheetRecoil = await loadPlayerSpritesheet(\n        resolve('world://animations/z1hitreact.json'),\n      )\n      const spritesheetPunch = await loadPlayerSpritesheet(\n        resolve('world://animations/z1punch.json'),\n      )\n\n      preloadedAssets = {\n        walkTextures: spritesheetWalk.textures,\n        recoilTextures: spritesheetRecoil.textures,\n        punchTextures: spritesheetPunch.textures,\n      }\n\n      return preloadedAssets\n    })()\n  }\n\n  return preloadPromise\n}\n\nexport function getPreloadedAssets(): PreloadedAssets {\n  if (!preloadedAssets) {\n    throw new Error('Assets have not been preloaded yet')\n  }\n\n  return preloadedAssets\n}\n", "import type { LooseSpawnableDefinition } from \"@dreamlab.gg/core\";\nimport { Entity } from \"@dreamlab.gg/core\";\nimport {\n  game,\n  events as magicEvents,\n  physics,\n} from \"@dreamlab.gg/core/dist/labs\";\nimport { onlyNetClient } from \"@dreamlab.gg/core/dist/network\";\nimport type { Vector } from \"matter-js\";\nimport Matter from \"matter-js\";\nimport InventoryManager from \"../inventory/inventoryManager.ts\";\n\nconst ATTACK_COOLDOWN = 250;\n\nexport class ParticleSpawner extends Entity {\n  private lastSpawnedTime: number | null = null;\n  private attackPosition: Vector | undefined = undefined;\n  private direction = 0;\n\n  private readonly bulletDefinition = (rotation: number) => {\n    return {\n      entity: \"@dreamlab/Particle\",\n      transform: {\n        position: {\n          x: 0,\n          y: 0,\n        },\n      },\n      args: {\n        width: 100,\n        height: 100,\n        direction: 1,\n        emitterConfig: {\n          lifetime: { min: 1, max: 1 },\n          frequency: 0.001,\n          spawnChance: 1,\n          particlesPerWave: 2,\n          emitterLifetime: 0.8,\n          maxParticles: 150,\n          addAtBack: false,\n          autoUpdate: false,\n          behaviors: [\n            {\n              type: \"alpha\",\n              config: {\n                alpha: {\n                  list: [\n                    { value: 2, time: 0 },\n                    { value: 0.5, time: 1 },\n                  ],\n                },\n              },\n            },\n            {\n              type: \"scale\",\n              config: {\n                scale: {\n                  list: [\n                    { value: 0.8, time: 0 },\n                    { value: 0.3, time: 1 },\n                  ],\n                },\n              },\n            },\n            {\n              type: \"color\",\n              config: {\n                color: {\n                  list: [\n                    { value: \"ffffff\", time: 0 },\n                    { value: \"ff4d4d\", time: 1 },\n                  ],\n                },\n              },\n            },\n            {\n              type: \"rotationStatic\",\n              config: {\n                min: rotation,\n                max: rotation,\n              },\n            },\n            {\n              type: \"moveSpeed\",\n              config: {\n                speed: {\n                  list: [\n                    { value: 10_000, time: 0 },\n                    { value: 9_999, time: 1 },\n                  ],\n                },\n              },\n            },\n            {\n              type: \"textureSingle\",\n              config: {\n                texture:\n                  \"https://s3-assets.dreamlab.gg/uploaded-from-editor/Sparks-1709669482539.png\",\n              },\n            },\n          ],\n        },\n      },\n    };\n  };\n\n  private muzzleFlashDefinition = {\n    entity: \"@dreamlab/Particle\",\n    transform: {\n      position: {\n        x: 0,\n        y: 0,\n      },\n    },\n    args: {\n      width: 200,\n      height: 200,\n      direction: 1,\n      emitterConfig: {\n        lifetime: { min: 0.1, max: 0.2 },\n        frequency: 0.001,\n        spawnChance: 1,\n        particlesPerWave: 5,\n        emitterLifetime: 0.1,\n        maxParticles: 20,\n        addAtBack: false,\n        autoUpdate: false,\n        behaviors: [\n          {\n            type: \"alpha\",\n            config: {\n              alpha: {\n                list: [\n                  { value: 1, time: 0 },\n                  { value: 0, time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"scale\",\n            config: {\n              scale: {\n                list: [\n                  { value: 1.5, time: 0 },\n                  { value: 0.5, time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"colorStatic\",\n            config: {\n              color: \"ff4d4d\",\n            },\n          },\n          {\n            type: \"moveSpeed\",\n            config: {\n              speed: {\n                list: [\n                  { value: 1_000, time: 0 },\n                  { value: 500, time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"rotation\",\n            config: {\n              minStart: 0,\n              maxStart: 360,\n              minSpeed: 0,\n              maxSpeed: 0,\n            },\n          },\n          {\n            type: \"textureSingle\",\n            config: {\n              texture:\n                \"https://s3-assets.dreamlab.gg/uploaded-from-editor/Sparks-1709669482539.png\",\n            },\n          },\n        ],\n      },\n    },\n  } as LooseSpawnableDefinition;\n\n  private smokeDefinition = {\n    entity: \"@dreamlab/Particle\",\n    transform: {\n      position: {\n        x: 0,\n        y: 0,\n      },\n    },\n    args: {\n      width: 200,\n      height: 200,\n      direction: 1,\n      emitterConfig: {\n        lifetime: { min: 0.5, max: 1 },\n        frequency: 0.001,\n        spawnChance: 1,\n        particlesPerWave: 5,\n        emitterLifetime: 0.2,\n        maxParticles: 20,\n        addAtBack: false,\n        autoUpdate: false,\n        behaviors: [\n          {\n            type: \"alpha\",\n            config: {\n              alpha: {\n                list: [\n                  { value: 0.8, time: 0 },\n                  { value: 0, time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"scale\",\n            config: {\n              scale: {\n                list: [\n                  { value: 0.5, time: 0 },\n                  { value: 2, time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"color\",\n            config: {\n              color: {\n                list: [\n                  { value: \"888888\", time: 0 },\n                  { value: \"444444\", time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"moveSpeed\",\n            config: {\n              speed: {\n                list: [\n                  { value: 300, time: 0 },\n                  { value: 50, time: 1 },\n                ],\n              },\n            },\n          },\n          {\n            type: \"rotation\",\n            config: {\n              minStart: 0,\n              maxStart: 360,\n              minSpeed: 20,\n              maxSpeed: 50,\n            },\n          },\n          {\n            type: \"textureSingle\",\n            config: {\n              texture:\n                \"https://s3-assets.dreamlab.gg/uploaded-from-editor/Sparks-1709669482539.png\",\n            },\n          },\n        ],\n      },\n    },\n  } as LooseSpawnableDefinition;\n\n  public constructor() {\n    super();\n\n    const netClient = onlyNetClient(game());\n\n    magicEvents(\"common\")?.on(\"onPlayerAttack\", async (player, gear) => {\n      if (\n        player.currentAnimation !== \"bow\" &&\n        player.currentAnimation !== \"shoot\"\n      )\n        return;\n      if (!gear || Date.now() - (this.lastSpawnedTime || 0) <= ATTACK_COOLDOWN)\n        return;\n\n      this.lastSpawnedTime = Date.now();\n      const invItem =\n        InventoryManager.getInstance().getInventoryItemFromBaseGear(gear);\n\n      this.direction = player.facing === \"left\" ? -1 : 1;\n      const xOffset =\n        player.currentAnimation === \"shoot\"\n          ? this.direction * 245\n          : this.direction * 165;\n      const yOffset = player.currentAnimation === \"shoot\" ? 125 : 75;\n\n      this.attackPosition = {\n        x: player.body.position.x + xOffset,\n        y: player.body.position.y - yOffset,\n      } as Vector;\n\n      const newBullet = this.bulletDefinition(this.direction === 1 ? 0 : 180);\n\n      newBullet.transform.position = this.attackPosition;\n      game(\"client\")?.spawn(newBullet);\n\n      this.muzzleFlashDefinition.transform.position = this.attackPosition;\n      game(\"client\")?.spawn(this.muzzleFlashDefinition);\n\n      this.smokeDefinition.transform.position = this.attackPosition;\n      game(\"client\")?.spawn(this.smokeDefinition);\n\n      const startPoint = Matter.Vector.create(\n        player.position.x,\n        player.position.y\n      );\n      const endPoint = Matter.Vector.create(\n        startPoint.x + 4_000 * Math.cos(this.direction === 1 ? 0 : Math.PI),\n        startPoint.y + 4_000 * Math.sin(this.direction === 1 ? 0 : Math.PI)\n      );\n\n      const collisions = Matter.Query.ray(\n        game().physics.engine.world.bodies,\n        startPoint,\n        endPoint,\n        50\n      ).filter(\n        (collision) =>\n          collision.parentB.label === \"solid\" ||\n          collision.parentB.label === \"zombie\"\n      );\n\n      collisions.sort((a, b) =>\n        this.direction === 1\n          ? a.parentB.position.x - b.parentB.position.x\n          : b.parentB.position.x - a.parentB.position.x\n      );\n\n      for (const collision of collisions) {\n        if (collision.parentB.label === \"solid\") break;\n\n        if (collision.parentB.label === \"zombie\") {\n          const targetZombie = collision.parentB;\n          const entity = physics().getEntity(targetZombie);\n          if (entity) {\n            void netClient?.sendCustomMessage(\"@cvz/Hittable/hit\", {\n              uid: entity.uid,\n              damage: invItem ? invItem.damage : 1,\n            });\n          }\n\n          break;\n        }\n      }\n    });\n  }\n\n  public override teardown(): void {\n    // TODO: implement\n  }\n}\n", "import type { Player } from \"@dreamlab.gg/core/entities\";\nimport { EventEmitter } from \"@dreamlab.gg/core/events\";\nimport type { InventoryItem } from \"./inventory/inventoryManager.ts\";\n\ninterface WorldEvents {\n  onPlayerScore: [number];\n  onPlayerDamage: [number];\n  onPlayerHeal: [number];\n  onPlayerNearItem: [Player, InventoryItem | undefined];\n  onInventoryUpdate: [];\n  onGoldUpdate: [];\n\n  onEnterRegion: [string];\n  onExitRegion: [string];\n\n  onRegionStart: [string];\n  onRegionEnd: [string];\n  onRegionWaveStart: [string];\n  onRegionCooldownStart: [string];\n  onRegionCooldownEnd: [string];\n  onRegionZombieSpawning: [{ x: number; y: number }[]];\n}\n\nexport const events = new EventEmitter<Events>();\n\ntype Events = WorldEvents;\nexport type Event<E extends {} = Events> = keyof E;\n\nexport type EventArgs<\n  T extends Event<E>,\n  E extends {} = Events\n> = T extends keyof E ? (E[T] extends unknown[] ? E[T] : never) : never;\n\nexport type MyEventHandler<T extends Event<E>, E extends {} = Events> = (\n  ...args: EventArgs<T, E>\n) => void;\n", "import type { BaseGear, Gear } from \"@dreamlab.gg/core/dist/managers\";\nimport { events } from \"../events.ts\";\n\nexport interface InventoryItem {\n  baseGear: Gear;\n  lore: string;\n  damage: number;\n  range: number;\n  value: number | undefined; // gold value\n}\n\nexport type InventoryData = (InventoryItem | undefined)[];\nconst TOTAL_SLOTS = 36;\n\nclass InventoryManager {\n  private static instance: InventoryManager;\n  private inventoryData: InventoryData;\n\n  private constructor() {\n    this.inventoryData = Array.from({ length: TOTAL_SLOTS }).fill(\n      undefined\n    ) as InventoryData;\n  }\n\n  public static getInstance(): InventoryManager {\n    if (!InventoryManager.instance) {\n      InventoryManager.instance = new InventoryManager();\n    }\n\n    return InventoryManager.instance;\n  }\n\n  public getInventoryData(): InventoryData {\n    return this.inventoryData;\n  }\n\n  public setInventoryData(data: InventoryData): void {\n    this.inventoryData = data;\n    events.emit(\"onInventoryUpdate\");\n  }\n\n  public addItemToInventory(newItem: InventoryItem): void {\n    const slotIndex = this.inventoryData.indexOf(undefined);\n    if (slotIndex !== -1) {\n      this.inventoryData[slotIndex] = newItem;\n      events.emit(\"onInventoryUpdate\");\n    } else {\n      console.warn(\"No empty slot available to add the item.\");\n    }\n  }\n\n  public swapItems(sourceSlotIndex: number, targetSlotIndex: number): void {\n    const temp = this.inventoryData[sourceSlotIndex];\n    this.inventoryData[sourceSlotIndex] = this.inventoryData[targetSlotIndex];\n    this.inventoryData[targetSlotIndex] = temp;\n    events.emit(\"onInventoryUpdate\");\n  }\n\n  public getInventoryItemFromBaseGear(baseGear: BaseGear) {\n    for (const item of this.inventoryData) {\n      if (item?.baseGear === baseGear) return item;\n    }\n\n    return undefined;\n  }\n}\n\nexport default InventoryManager;\n", "import { Entity, isSpawnableEntity } from \"@dreamlab.gg/core\";\nimport { game } from \"@dreamlab.gg/core/dist/labs\";\nimport type { MessageListenerServer } from \"@dreamlab.gg/core/dist/network\";\nimport { onlyNetClient, onlyNetServer } from \"@dreamlab.gg/core/dist/network\";\nimport Matter from \"matter-js\";\nimport { events } from \"../events.ts\";\n\nexport interface Region {\n  uid: string;\n  zombieTypes: {\n    width: number;\n    height: number;\n    maxHealth: number;\n    speed: number;\n    knockback: number;\n  }[];\n  position: { x: number; y: number };\n  width: number;\n  height: number;\n  waves: number;\n  zombiesPerWave: number;\n  waveInterval: number;\n  endCooldown: number;\n  currentWave: number;\n  isInCooldown: boolean;\n  spawnIntervalId: ReturnType<typeof setTimeout> | undefined;\n}\n\nconst stopRegionInterval = (region: Region) => {\n  if (region.spawnIntervalId) {\n    clearInterval(region.spawnIntervalId);\n  }\n\n  region.spawnIntervalId = undefined;\n  events.emit(\"onRegionEnd\", region.uid);\n};\n\nconst isPlayerInRegion = (\n  playerPosition: { x: number; y: number },\n  region: Region\n) => {\n  const buffer = 300;\n  const isWithinXBounds =\n    playerPosition.x >= region.position.x - region.width / 2 - buffer &&\n    playerPosition.x <= region.position.x + region.width / 2 + buffer;\n\n  const isWithinYBounds =\n    playerPosition.y >= region.position.y - region.height / 2 - buffer &&\n    playerPosition.y <= region.position.y + region.height / 2 + buffer;\n\n  return isWithinXBounds && isWithinYBounds;\n};\n\nconst getSpawnPosition = (region: Region) => {\n  const regionLeft = region.position.x - region.width / 2;\n  const regionRight = region.position.x + region.width / 2;\n  const regionTop = region.position.y - region.height / 2;\n  const regionBottom = region.position.y + region.height / 2;\n\n  const randomX = Math.random() * (regionRight - regionLeft) + regionLeft;\n  const randomY = Math.random() * (regionBottom - regionTop) + regionTop;\n\n  return { x: randomX, y: randomY };\n};\n\nconst regions: Map<string, Region> = new Map();\nconst START_CHANNEL = \"@cvz/Region/Start\";\nconst END_CHANNEL = \"@cvz/Region/End\";\n\nconst onInstantiateRegion = (entity: Entity) => {\n  if (!isSpawnableEntity(entity)) return;\n  if (entity.definition.entity.includes(\"SpawnRegion\")) {\n    const regionArgs = entity.args;\n    const region = {\n      uid: entity.uid,\n      position: entity.transform.position,\n      width: regionArgs.width,\n      height: regionArgs.height,\n      zombieTypes: regionArgs.zombieTypes,\n      zombiesPerWave: regionArgs.zombiesPerWave,\n      waves: regionArgs.waves,\n      waveInterval: regionArgs.waveInterval,\n      endCooldown: regionArgs.endCooldown,\n      currentWave: 0,\n      isInCooldown: false,\n      spawnIntervalId: undefined,\n    };\n    regions.set(region.uid, region);\n  }\n};\n\nconst onUpdateRegion = (entity: Entity) => {\n  if (!isSpawnableEntity(entity)) return;\n  if (!entity.definition.entity.includes(\"SpawnRegion\")) return;\n\n  const regionArgs = entity.args;\n  const updatedRegion = {\n    uid: entity.uid,\n    position: entity.transform.position,\n    zombieTypes: regionArgs.zombieTypes,\n    bounds: regionArgs.bounds,\n    zombiesPerWave: regionArgs.zombiesPerWave,\n    waves: regionArgs.waves,\n    waveInterval: regionArgs.waveInterval,\n    endCooldown: regionArgs.endCooldown,\n    currentWave: 0,\n    isInCooldown: false,\n    spawnIntervalId: undefined,\n  };\n\n  if (regions.has(updatedRegion.uid)) {\n    const existingRegion = regions.get(updatedRegion.uid);\n    if (existingRegion) {\n      regions.set(updatedRegion.uid, {\n        ...existingRegion,\n        ...updatedRegion,\n      });\n    }\n  }\n};\n\n// eslint-disable-next-line no-empty-pattern\nconst onServerRegionEnd: MessageListenerServer = async ({}, _, data) => {\n  const { uid } = data as {\n    uid: string;\n  };\n  const region = regions.get(uid);\n  if (region) stopRegionInterval(region);\n};\n\nexport class RegionManager extends Entity {\n  public constructor() {\n    super();\n\n    const netClient = onlyNetClient(game());\n    const netServer = onlyNetServer(game());\n\n    const spawnZombies = async (region: Region) => {\n      const zombies = Matter.Composite.allBodies(\n        game().physics.engine.world\n      ).filter((b) => b.label === \"zombie\");\n      if (zombies.length >= 30) return;\n\n      events.emit(\"onRegionWaveStart\", region.uid);\n      const zombieCount = region.zombiesPerWave;\n\n      const delay = async (ms: number) =>\n        new Promise((resolve) => {\n          setTimeout(resolve, ms);\n        });\n\n      const positions: { x: number; y: number }[] = [];\n      for (let idx = 0; idx < zombieCount; idx++) {\n        const spawnPosition = getSpawnPosition(region);\n        positions.push(spawnPosition);\n      }\n\n      events.emit(\"onRegionZombieSpawning\", positions);\n\n      await delay(3_000);\n      const spawnPromises = positions.map(async (spawnPosition) => {\n        const randomZombieTypeIndex = Math.floor(\n          Math.random() * region.zombieTypes.length\n        );\n        const randomZombieType = region.zombieTypes[randomZombieTypeIndex];\n\n        return game().spawn({\n          entity: \"@cvz/ZombieMob\",\n          args: randomZombieType as Record<string, unknown>,\n          transform: {\n            position: [spawnPosition.x, spawnPosition.y],\n            zIndex: 5,\n          },\n          tags: [\n            \"net/replicated\",\n            \"net/server-authoritative\",\n            \"editor/doNotSave\",\n          ],\n        });\n      });\n\n      await Promise.all(spawnPromises);\n    };\n\n    const manageRegionWaves = async (region: Region) => {\n      if (region.currentWave >= region.waves) {\n        if (!region.isInCooldown) {\n          region.isInCooldown = true;\n          events.emit(\"onRegionCooldownStart\", region.uid);\n          setTimeout(() => {\n            region.isInCooldown = false;\n            region.currentWave = 0;\n            events.emit(\"onRegionCooldownEnd\", region.uid);\n            stopRegionInterval(region);\n          }, region.endCooldown * 1_000);\n        }\n      } else {\n        await spawnZombies(region);\n        region.currentWave++;\n        // If there are more waves to handle, set up the next call\n        if (region.currentWave < region.waves) {\n          const interval = setTimeout(\n            async () => manageRegionWaves(region),\n            Math.max(region.waveInterval - 3, 0) * 1_000\n          );\n          region.spawnIntervalId = interval;\n        } else {\n          // Handle cooldown if this was the last wave\n          await manageRegionWaves(region);\n        }\n      }\n    };\n\n    const onServerRegionStart: MessageListenerServer = async (\n      // eslint-disable-next-line no-empty-pattern\n      {},\n      _,\n      data\n    ) => {\n      if (!netServer) throw new Error(\"missing network\");\n      const { uid } = data as {\n        uid: string;\n      };\n      const region = regions.get(uid);\n      if (region) {\n        if (region.isInCooldown || region.spawnIntervalId) {\n          return;\n        }\n\n        await manageRegionWaves(region);\n        events.emit(\"onRegionStart\", region.uid);\n      }\n    };\n\n    const onEnterRegion = async (uid: string) => {\n      const region = regions.get(uid);\n      if (!region) return;\n\n      await netClient?.sendCustomMessage(START_CHANNEL, { uid });\n    };\n\n    const onExitRegion = async (uid: string) => {\n      const region = regions.get(uid);\n      if (!region) return;\n\n      const players = Matter.Composite.allBodies(\n        game().physics.engine.world\n      ).filter(\n        (b) =>\n          b.label === \"player\" &&\n          isPlayerInRegion({ x: b.position.x, y: b.position.y }, region)\n      );\n      if (players.length === 0) {\n        await netClient?.sendCustomMessage(END_CHANNEL, { uid });\n      }\n    };\n\n    netServer?.addCustomMessageListener(START_CHANNEL, onServerRegionStart);\n    netServer?.addCustomMessageListener(END_CHANNEL, onServerRegionEnd);\n\n    game().events.common.addListener(\"onInstantiate\", onInstantiateRegion);\n    game().events.common.addListener(\"onArgsChanged\", onUpdateRegion);\n\n    events.addListener(\"onEnterRegion\", onEnterRegion);\n    events.addListener(\"onExitRegion\", onExitRegion);\n  }\n\n  public override teardown(): void {\n    const netServer = onlyNetServer(game());\n    // netServer?.removeCustomMessageListener(START_CHANNEL, onServerRegionStart)\n    netServer?.removeCustomMessageListener(END_CHANNEL, onServerRegionEnd);\n\n    game().events.common.removeListener(\"onInstantiate\", onInstantiateRegion);\n    game().events.common.removeListener(\"onArgsChanged\", onUpdateRegion);\n  }\n}\n", "import type { RenderTime, SpawnableContext, Time } from '@dreamlab.gg/core'\nimport { Solid, SolidArgs } from '@dreamlab.gg/core/dist/entities'\nimport { camera, game } from '@dreamlab.gg/core/dist/labs'\nimport { z } from '@dreamlab.gg/core/dist/sdk'\nimport { distance, Vec } from '@dreamlab.gg/core/math'\nimport type { Vector } from 'matter-js'\nimport Matter from 'matter-js'\n\ntype Args = typeof ArgsSchema\nconst ArgsSchema = SolidArgs.extend({\n  mustConnectWithBody: z.boolean(),\n})\n\nexport { ArgsSchema as GrappleHookArgs }\nexport class GrappleHook<A extends Args = Args> extends Solid<A> {\n  private cursorPosition: Vector | undefined = undefined\n  private hasReachedTarget = false\n\n  public constructor(ctx: SpawnableContext<A>) {\n    super(ctx)\n\n    this.body.collisionFilter = {\n      category: 0x0004,\n      mask: 0x0000,\n    }\n    this.body.frictionAir = 0.2\n    this.body.label = 'grappleHook'\n\n    if (!this.args.mustConnectWithBody) this.args.mustConnectWithBody = false\n\n    const $game = game('client')\n    if (!$game) return\n\n    $game.client?.render.container.addEventListener('pointerover', ev => () => {\n      const screenPosition = Vec.create(ev.offsetX, ev.offsetY)\n      this.cursorPosition = camera().screenToWorld(screenPosition)\n    })\n    $game.client?.render.container.addEventListener('pointerout', () => {\n      this.cursorPosition = undefined\n    })\n    $game.client?.render.container.addEventListener('pointermove', ev => () => {\n      const screenPosition = Vec.create(ev.offsetX, ev.offsetY)\n      this.cursorPosition = camera().screenToWorld(screenPosition)\n    })\n  }\n\n  public override onPhysicsStep(_: Time): void {\n    const $game = game('client')\n    if (!$game) {\n      return\n    }\n\n    Matter.Body.setAngle(this.body, 0)\n    Matter.Body.setAngularVelocity(this.body, 0)\n\n    const playerBody = Matter.Composite.allBodies(\n      $game.physics.engine.world,\n    ).find(b => b.label === 'player')\n    if (!playerBody) return\n\n    const inputs = $game.client?.inputs\n    const isCrouching = inputs?.getInput('@cvz/hook') ?? false\n\n    if (isCrouching && this.cursorPosition) {\n      if (this.args.mustConnectWithBody) {\n        const bodiesAtCursor = Matter.Query.point(\n          Matter.Composite.allBodies($game.physics.engine.world),\n          this.cursorPosition,\n        )\n\n        if (bodiesAtCursor.length === 0) {\n          return\n        }\n      }\n\n      if (this.body.render.visible === false) {\n        Matter.Body.setPosition(this.body, playerBody.position)\n        this.body.render.visible = true\n      }\n\n      const reachedTarget =\n        distance(this.body.position, this.cursorPosition) <= 1\n\n      if (!reachedTarget) {\n        const dir = Vec.normalise(\n          Vec.sub(this.cursorPosition, this.body.position),\n        )\n        const forceMagnitude = 0.005\n        const force = Vec.mult(dir, forceMagnitude)\n        Matter.Body.applyForce(this.body, this.body.position, force)\n      } else {\n        this.hasReachedTarget = true\n        Matter.Body.setVelocity(this.body, { x: 0, y: 0 })\n        const playerToHookDirection = Vec.normalise(\n          Vec.sub(this.body.position, playerBody.position),\n        )\n        const pullForceMagnitude = 1.5\n        const pullForce = Vec.mult(playerToHookDirection, pullForceMagnitude)\n        Matter.Body.applyForce(playerBody, playerBody.position, pullForce)\n      }\n    } else if (!isCrouching) {\n      this.body.render.visible = false\n    }\n  }\n\n  public override onRenderFrame(time: RenderTime) {\n    super.onRenderFrame(time)\n\n    const $game = game('client')\n    if (!$game) {\n      return\n    }\n\n    if (this.body.render.visible) {\n      const debug = $game.debug\n      const pos = Vec.add(this.body.position, camera().offset)\n      this.gfx!.visible = true\n      this.container!.position = pos\n\n      if (!this.hasReachedTarget && this.cursorPosition) {\n        const dx = this.cursorPosition.x - this.body.position.x\n        const dy = this.cursorPosition.y - this.body.position.y\n        const angle = Math.atan2(dy, dx)\n        this.container!.rotation = angle\n      } else {\n        this.container!.rotation = this.body.angle\n      }\n\n      const alpha = debug.value ? 0.5 : 0\n      this.gfx!.alpha = alpha\n\n      if (this.sprite) {\n        this.sprite.visible = this.body.render.visible\n      }\n    } else {\n      this.gfx!.visible = false\n      this.hasReachedTarget = false\n      if (this.sprite) {\n        this.sprite.visible = false\n      }\n    }\n  }\n}\n", "import type { RenderTime, SpawnableContext } from \"@dreamlab.gg/core\";\nimport type { EventHandler } from \"@dreamlab.gg/core/dist/events\";\nimport {\n  camera,\n  debug,\n  game,\n  events as magicEvent,\n} from \"@dreamlab.gg/core/dist/labs\";\nimport { Solid, SolidArgs } from \"@dreamlab.gg/core/entities\";\nimport { createGear } from \"@dreamlab.gg/core/managers\";\nimport { Vec } from \"@dreamlab.gg/core/math\";\nimport { z } from \"@dreamlab.gg/core/sdk\";\nimport { events } from \"../../events.ts\";\nimport type { InventoryItem } from \"../../inventory/inventoryManager.ts\";\n\ntype Args = typeof ArgsSchema;\nconst ArgsSchema = SolidArgs.extend({\n  displayName: z.string().default(\"Default Item\"),\n  animationName: z\n    .enum([\"bow\", \"shoot\", \"greatsword\", \"idle\", \"jump\", \"jog\", \"walk\"])\n    .default(\"shoot\"),\n  damage: z.number().default(1),\n  range: z.number().default(1),\n  lore: z.string().default(\"Default Item Lore\"),\n  bone: z.enum([\"handLeft\", \"handRight\"]).default(\"handRight\"),\n  anchorX: z.number().default(0.5),\n  anchorY: z.number().default(0.5),\n  rotation: z.number().default(0),\n  speedMultiplier: z.number().optional().default(1),\n});\n\ntype OnPlayerCollisionStart = EventHandler<\"onPlayerCollisionStart\">;\ntype OnPlayerCollisionEnd = EventHandler<\"onPlayerCollisionEnd\">;\n\nexport { ArgsSchema as InventoryItemArgs };\nexport class Item<A extends Args = Args> extends Solid<A> {\n  protected onPlayerCollisionStart: OnPlayerCollisionStart | undefined;\n  protected onPlayerCollisionEnd: OnPlayerCollisionEnd | undefined;\n\n  private time = 0;\n  private floatHeight = 5;\n  private rotationSpeed = 0.006;\n\n  public constructor(ctx: SpawnableContext<A>) {\n    super(ctx);\n\n    this.body.isSensor = true;\n    this.body.isStatic = true;\n    this.body.label = \"inventoryItem\";\n\n    const $game = game();\n\n    magicEvent(\"client\")?.addListener(\n      \"onPlayerCollisionStart\",\n      (this.onPlayerCollisionStart = ([player, other]) => {\n        if (this.body && other === this.body && $game.client) {\n          const baseGear = {\n            displayName: this.args.displayName,\n            textureURL: this.args.spriteSource?.url ?? \"\",\n            animationName: this.args.animationName,\n            anchor: { x: this.args.anchorX, y: this.args.anchorY },\n            rotation: this.args.rotation,\n            bone: this.args.bone,\n            speedMultiplier: this.args.speedMultiplier,\n          };\n\n          const newItem = createGear(baseGear);\n\n          const inventoryItem: InventoryItem = {\n            baseGear: newItem,\n            lore: this.args.lore,\n            damage: this.args.damage,\n            range: this.args.range,\n            value: 100,\n          };\n\n          events.emit(\"onPlayerNearItem\", player, inventoryItem);\n        }\n      })\n    );\n\n    magicEvent(\"client\")?.on(\n      \"onPlayerCollisionEnd\",\n      (this.onPlayerCollisionEnd = ([player, other]) => {\n        if (this.body && other === this.body && $game.client) {\n          events.emit(\"onPlayerNearItem\", player, undefined);\n        }\n      })\n    );\n  }\n\n  public override teardown(): void {\n    super.teardown();\n\n    magicEvent(\"client\")?.removeListener(\n      \"onPlayerCollisionStart\",\n      this.onPlayerCollisionStart\n    );\n\n    magicEvent(\"client\")?.removeListener(\n      \"onPlayerCollisionEnd\",\n      this.onPlayerCollisionEnd\n    );\n  }\n\n  public override onRenderFrame(_time: RenderTime) {\n    // super.onRenderFrame(time)\n    this.time += 0.05;\n\n    const yOffset = Math.sin(this.time) * this.floatHeight;\n    const pos = Vec.add(this.transform.position, camera().offset);\n    pos.y += yOffset;\n\n    this.container!.rotation += this.rotationSpeed;\n    this.container!.position = pos;\n\n    if (this.gfx) this.gfx.alpha = debug() ? 0.5 : 0;\n  }\n}\n", "import type { RenderTime, SpawnableContext } from \"@dreamlab.gg/core\";\nimport type { EventHandler } from \"@dreamlab.gg/core/dist/events\";\nimport {\n  camera,\n  game,\n  events as magicEvents,\n} from \"@dreamlab.gg/core/dist/labs\";\nimport type { CircleGraphics } from \"@dreamlab.gg/core/dist/utils\";\nimport { drawCircle } from \"@dreamlab.gg/core/dist/utils\";\nimport { Solid, SolidArgs } from \"@dreamlab.gg/core/entities\";\nimport type { SyncedValue } from \"@dreamlab.gg/core/network\";\nimport { syncedValue } from \"@dreamlab.gg/core/network\";\nimport { z } from \"@dreamlab.gg/core/sdk\";\nimport type { MyEventHandler } from \"../../events.ts\";\nimport { events } from \"../../events.ts\";\n\ntype Args = typeof ArgsSchema;\nconst ArgsSchema = SolidArgs.extend({\n  zombieTypes: z\n    .array(\n      z.object({\n        width: z.number(),\n        height: z.number(),\n        maxHealth: z.number(),\n        speed: z.number(),\n        knockback: z.number(),\n      })\n    )\n    .default([\n      {\n        width: 100,\n        height: 200,\n        maxHealth: 10,\n        speed: 3,\n        knockback: 1.25,\n      },\n    ]),\n  zombiesPerWave: z.number().default(1),\n  waves: z.number().default(3),\n  waveInterval: z.number().default(25),\n  endCooldown: z.number().default(15),\n});\n\ntype OnPlayerCollisionStart = EventHandler<\"onPlayerCollisionStart\">;\ntype OnPlayerCollisionEnd = EventHandler<\"onPlayerCollisionEnd\">;\ntype OnRegionZombieSpawning = MyEventHandler<\"onRegionZombieSpawning\">;\ntype OnRegionCooldownStart = MyEventHandler<\"onRegionCooldownStart\">;\ntype OnRegionCooldownEnd = MyEventHandler<\"onRegionCooldownEnd\">;\ntype OnRegionWaveStart = MyEventHandler<\"onRegionWaveStart\">;\ntype OnRegionStart = MyEventHandler<\"onRegionStart\">;\ntype OnRegionEnd = MyEventHandler<\"onRegionEnd\">;\n\ntype zombiePosition = { x: number; y: number }[] | undefined;\ninterface RegionData {\n  isCooldown: boolean;\n  waveStarted: boolean;\n  regionActive: boolean;\n  positions: zombiePosition;\n}\n\nexport { ArgsSchema as SpawnRegionArgs };\nexport class SpawnRegion<A extends Args = Args> extends Solid<A> {\n  protected gfxCircle: CircleGraphics | undefined;\n  private regionData: SyncedValue<RegionData> = syncedValue(\n    game(),\n    this.uid,\n    \"regionData\",\n    {\n      isCooldown: false as boolean,\n      waveStarted: false as boolean,\n      regionActive: false as boolean,\n      positions: undefined as zombiePosition,\n    }\n  );\n\n  protected onPlayerCollisionStart: OnPlayerCollisionStart | undefined;\n  protected onPlayerCollisionEnd: OnPlayerCollisionEnd | undefined;\n  protected onRegionZombieSpawning: OnRegionZombieSpawning | undefined;\n  protected onRegionCooldownStart: OnRegionCooldownStart | undefined;\n  protected onRegionCooldownEnd: OnRegionCooldownEnd | undefined;\n  protected onRegionWaveStart: OnRegionWaveStart | undefined;\n  protected onRegionStart: OnRegionStart | undefined;\n  protected onRegionEnd: OnRegionEnd | undefined;\n\n  public constructor(ctx: SpawnableContext<A>) {\n    super(ctx);\n    this.body.isSensor = true;\n    this.body.label = \"spawnRegion\";\n\n    magicEvents(\"client\")?.addListener(\n      \"onPlayerCollisionStart\",\n      (this.onPlayerCollisionStart = ([_player, other]) => {\n        if (other.id === this.body.id) {\n          events.emit(\"onEnterRegion\", this.uid);\n        }\n      })\n    );\n\n    magicEvents(\"client\")?.on(\n      \"onPlayerCollisionEnd\",\n      (this.onPlayerCollisionEnd = ([_player, other]) => {\n        if (other.id === this.body.id) {\n          events.emit(\"onExitRegion\", this.uid);\n        }\n      })\n    );\n\n    events.addListener(\n      \"onRegionZombieSpawning\",\n      (this.onRegionZombieSpawning = (positions) => {\n        this.regionData.value.positions = Array.isArray(positions)\n          ? positions\n          : undefined;\n\n        setTimeout(() => {\n          this.regionData.value.positions = undefined;\n        }, 3_000);\n      })\n    );\n\n    events.addListener(\n      \"onRegionCooldownStart\",\n      (this.onRegionCooldownStart = (regionId) => {\n        if (this.uid === regionId) {\n          this.regionData.value.isCooldown = true;\n        }\n      })\n    );\n\n    events.addListener(\n      \"onRegionCooldownEnd\",\n      (this.onRegionCooldownEnd = (regionId) => {\n        if (this.uid === regionId) {\n          this.regionData.value.isCooldown = false;\n        }\n      })\n    );\n\n    events.addListener(\n      \"onRegionWaveStart\",\n      (this.onRegionWaveStart = (regionId) => {\n        if (this.uid === regionId) {\n          this.regionData.value.waveStarted = true;\n          setTimeout(() => {\n            this.regionData.value.waveStarted = false;\n          }, 3_000);\n        }\n      })\n    );\n\n    events.addListener(\n      \"onRegionStart\",\n      (this.onRegionStart = (regionId) => {\n        if (this.uid === regionId) {\n          this.regionData.value.regionActive = true;\n        }\n      })\n    );\n\n    events.addListener(\n      \"onRegionEnd\",\n      (this.onRegionEnd = (regionId) => {\n        if (this.uid === regionId) {\n          this.regionData.value.regionActive = false;\n        }\n      })\n    );\n\n    const $game = game(\"client\");\n    if ($game) {\n      this.gfxCircle = drawCircle({ radius: 75 });\n      this.gfxCircle.zIndex = -1;\n\n      this.container?.addChild(this.gfxCircle);\n    }\n  }\n\n  public override teardown(): void {\n    super.teardown();\n\n    magicEvents(\"client\")?.removeListener(\n      \"onPlayerCollisionStart\",\n      this.onPlayerCollisionStart\n    );\n\n    magicEvents(\"client\")?.removeListener(\n      \"onPlayerCollisionEnd\",\n      this.onPlayerCollisionEnd\n    );\n\n    events.removeListener(\n      \"onRegionZombieSpawning\",\n      this.onRegionZombieSpawning\n    );\n    events.removeListener(\"onRegionCooldownStart\", this.onRegionCooldownStart);\n    events.removeListener(\"onRegionCooldownEnd\", this.onRegionCooldownEnd);\n    events.removeListener(\"onRegionWaveStart\", this.onRegionWaveStart);\n    events.removeListener(\"onRegionStart\", this.onRegionStart);\n    events.removeListener(\"onRegionEnd\", this.onRegionEnd);\n  }\n\n  public override onRenderFrame(time: RenderTime) {\n    super.onRenderFrame(time);\n\n    this.gfx!.clear();\n    this.gfxCircle!.clear();\n\n    let fillAlpha = 0;\n    let fillColor = 0x0;\n    const strokeAlpha = 1;\n    let strokeColor = 0x0;\n    const strokeWidth = 8;\n\n    if (this.regionData.value.regionActive) strokeColor = 0x38761d;\n    if (this.regionData.value.isCooldown) {\n      fillColor = 0x85c1e9;\n      fillAlpha = 0.5;\n      strokeColor = 0x3498db;\n    }\n\n    if (this.regionData.value.waveStarted) {\n      fillColor = 0x0;\n      fillAlpha = 0;\n      strokeColor = 0x9b0000;\n    }\n\n    this.gfx?.redraw(\n      { width: this.args.width, height: this.args.height },\n      {\n        fill: fillColor,\n        fillAlpha,\n        stroke: strokeColor,\n        strokeWidth,\n        strokeAlpha,\n      }\n    );\n\n    const pulseColors = [0xff0000, 0xd10000];\n    const timeBasedIndex = Math.floor(Date.now() / 250) % pulseColors.length;\n    const currentColor = pulseColors[timeBasedIndex];\n\n    if (this.regionData.value.positions) {\n      for (const { x, y } of Object.values(this.regionData.value.positions)) {\n        const adjustedX = x + camera().offset.x - this.container!.position.x;\n        const adjustedY = y + camera().offset.y - this.container!.position.y;\n\n        this.gfxCircle!.redraw(\n          { radius: 75 },\n          {\n            fill: currentColor,\n            fillAlpha: 0.5,\n          }\n        );\n\n        this.gfxCircle!.position.set(adjustedX, adjustedY);\n      }\n    }\n  }\n}\n", "import type {\n  ArgsPath,\n  PreviousArgs,\n  RenderTime,\n  SpawnableContext,\n  Time,\n} from \"@dreamlab.gg/core\";\nimport { SpawnableEntity } from \"@dreamlab.gg/core\";\nimport type { EventHandler } from \"@dreamlab.gg/core/dist/events\";\nimport {\n  camera,\n  debug,\n  game,\n  events as magicEvents,\n  physics,\n  stage,\n} from \"@dreamlab.gg/core/dist/labs\";\nimport { z } from \"@dreamlab.gg/core/dist/sdk\";\nimport { SpriteSourceSchema } from \"@dreamlab.gg/core/dist/textures\";\nimport { isNetPlayer } from \"@dreamlab.gg/core/entities\";\nimport type { Bounds, Vector } from \"@dreamlab.gg/core/math\";\nimport { simpleBoundsTest, toRadians, Vec } from \"@dreamlab.gg/core/math\";\nimport {\n  onlyNetClient,\n  onlyNetServer,\n  syncedValue,\n} from \"@dreamlab.gg/core/network\";\nimport type {\n  MessageListenerServer,\n  NetClient,\n  NetServer,\n  SyncedValue,\n} from \"@dreamlab.gg/core/network\";\nimport type { BoxGraphics, CircleGraphics } from \"@dreamlab.gg/core/utils\";\nimport {\n  deferUntilPhysicsStep,\n  drawBox,\n  drawCircle,\n} from \"@dreamlab.gg/core/utils\";\nimport Matter from \"matter-js\";\nimport type { Resource, Texture } from \"pixi.js\";\nimport { AnimatedSprite, Container } from \"pixi.js\";\nimport { getPreloadedAssets } from \"../../assetLoader.ts\";\nimport { events } from \"../../events.ts\";\nimport InventoryManager from \"../../inventory/inventoryManager.ts\";\n\ntype Args = typeof ArgsSchema;\nconst ArgsSchema = z.object({\n  width: z.number().positive().min(1).default(200),\n  height: z.number().positive().min(1).default(200),\n  spriteSource: SpriteSourceSchema.optional(),\n  maxHealth: z.number().positive().min(1).default(10),\n  speed: z.number().positive().min(1).default(1),\n  knockback: z.number().positive().min(0).default(2),\n});\n\ntype zombieAnimations = \"punch\" | \"recoil\" | \"walk\";\ntype OnPlayerAttack = EventHandler<\"onPlayerAttack\">;\ntype OnPlayerCollisionStart = EventHandler<\"onPlayerCollisionStart\">;\n\ninterface MobData {\n  health: number;\n  direction: number;\n  hitCooldown: number;\n  patrolDistance: number;\n  currentAnimation: zombieAnimations;\n  directionCooldown: number;\n}\n\nexport { ArgsSchema as ZombieArgs };\nexport class Zombie<A extends Args = Args> extends SpawnableEntity<A> {\n  protected readonly body: Matter.Body;\n  protected sprite: AnimatedSprite | undefined;\n\n  protected readonly container: Container | undefined;\n  protected readonly healthContainer: Container | undefined;\n  protected readonly gfx: BoxGraphics | undefined;\n  protected readonly gfxHitBox: CircleGraphics | undefined;\n  protected readonly gfxHealthBorder: BoxGraphics | undefined;\n  protected readonly gfxHealthAmount: BoxGraphics | undefined;\n\n  protected onPlayerAttack: OnPlayerAttack | undefined;\n  protected onPlayerCollisionStart: OnPlayerCollisionStart | undefined;\n  protected onHitServer: MessageListenerServer | undefined;\n\n  protected netServer: NetServer | undefined;\n  protected netClient: NetClient | undefined;\n\n  private HIT_CHANNEL = \"@cvz/Hittable/hit\";\n  private patrolDistance = 300;\n  private hitCooldown = 0.5; // Second(s)\n  private zombieAnimations: Record<string, Texture<Resource>[]> = {};\n  private mobData: SyncedValue<MobData> = syncedValue(this.uid, \"mobData\", {\n    health: this.args.maxHealth,\n    direction: 1,\n    hitCooldown: 0,\n    patrolDistance: 0,\n    currentAnimation: \"walk\" as zombieAnimations,\n    directionCooldown: 0,\n  });\n\n  public constructor(\n    ctx: SpawnableContext<A>,\n    { stroke = \"green\" }: { stroke?: string } = {}\n  ) {\n    super(ctx);\n\n    this.body = Matter.Bodies.rectangle(\n      this.transform.position.x,\n      this.transform.position.y,\n      this.args.width,\n      this.args.height,\n      {\n        label: \"zombie\",\n        inertia: Number.POSITIVE_INFINITY,\n      }\n    );\n\n    if (!this.tags.includes(\"net/replicated\")) {\n      this.tags.push(\n        \"net/replicated\",\n        \"net/server-authoritative\",\n        \"editor/doNotSave\"\n      );\n    }\n\n    this.netServer = onlyNetServer(game());\n    this.netClient = onlyNetClient(game());\n\n    physics().register(this, this.body);\n    physics().linkTransform(this.body, this.transform);\n\n    // onPlayerAttack listener\n    this.onPlayerAttack = async (player, gear) => {\n      if (\n        this.mobData.value.hitCooldown > 0 ||\n        [\"bow\", \"shoot\"].includes(gear?.animationName || \"\")\n      ) {\n        return;\n      }\n\n      const playerPositionX = player.body.position.x;\n      const mobPositionX = this.body.position.x;\n      const xDiff = playerPositionX - mobPositionX;\n\n      let damage = 1;\n      let range = this.args.width / 2 + 120;\n\n      if (gear) {\n        const inventoryManager = InventoryManager.getInstance();\n        const inventoryItem =\n          inventoryManager.getInventoryItemFromBaseGear(gear);\n\n        if (inventoryItem) {\n          damage = inventoryItem.damage;\n          range *= Math.max(inventoryItem.range, 1);\n        }\n      }\n\n      if (Math.abs(xDiff) <= range) {\n        await this.netClient?.sendCustomMessage(this.HIT_CHANNEL, {\n          uid: this.uid,\n          damage,\n        });\n\n        if (this.mobData.value.health - damage <= 0) {\n          events.emit(\"onPlayerScore\", this.args.maxHealth * 25);\n        }\n      }\n    };\n\n    // onPlayerCollisionStart\n    this.onPlayerCollisionStart = ([player, other]) => {\n      if (this.body && other === this.body) {\n        const heightDifference = player.body.position.y - this.body.position.y;\n\n        const mobHeight = this.body.bounds.max.y - this.body.bounds.min.y;\n        const threshold = mobHeight;\n        if (heightDifference < -threshold) {\n          const damage = 2;\n          void this.netClient?.sendCustomMessage(this.HIT_CHANNEL, {\n            uid: this.uid,\n            damage,\n          });\n          const bounceForce = { x: 0, y: -4 };\n          deferUntilPhysicsStep(() => {\n            Matter.Body.applyForce(\n              player.body,\n              player.body.position,\n              bounceForce\n            );\n          });\n        } else {\n          events.emit(\"onPlayerDamage\", 1);\n          const forceDirection = this.mobData.value.direction;\n          const forceMagnitude = 4 * forceDirection;\n          deferUntilPhysicsStep(() => {\n            Matter.Body.applyForce(player.body, player.body.position, {\n              x: forceMagnitude,\n              y: -1,\n            });\n          });\n        }\n      }\n    };\n\n    this.onHitServer = async ({ peerID }, _, data) => {\n      if (!this.netServer) throw new Error(\"missing network\");\n\n      const { uid: dataUid, damage } = data;\n      if (dataUid !== this.uid || typeof damage !== \"number\") return;\n\n      const player = game().entities.find(\n        (ev) => isNetPlayer(ev) && ev.connectionId === peerID\n      );\n      if (!player) throw new Error(\"missing netplayer\");\n      if (this.mobData.value.hitCooldown > 0) return;\n\n      this.mobData.value.hitCooldown = this.hitCooldown * 60;\n      Matter.Body.applyForce(this.body, this.body.position, {\n        x: this.args.knockback * -this.mobData.value.direction,\n        y: -1.75,\n      });\n\n      this.mobData.value.health -= damage;\n      if (this.mobData.value.health <= 0)\n        game().destroy(this as unknown as SpawnableEntity);\n    };\n\n    this.netServer?.addCustomMessageListener(\n      this.HIT_CHANNEL,\n      this.onHitServer\n    );\n\n    magicEvents(\"client\")?.on(\n      \"onPlayerCollisionStart\",\n      this.onPlayerCollisionStart\n    );\n    magicEvents(\"common\")?.on(\"onPlayerAttack\", this.onPlayerAttack);\n\n    // render animations, sprite, and graphics\n    const $game = game(\"client\");\n    if ($game) {\n      const assets = getPreloadedAssets();\n      this.zombieAnimations.walk = assets.walkTextures;\n      this.zombieAnimations.recoil = assets.recoilTextures;\n      this.zombieAnimations.punch = assets.punchTextures;\n      this.sprite = new AnimatedSprite(this.zombieAnimations.walk!);\n      this.sprite.gotoAndPlay(0);\n      this.sprite.anchor.set(0.45, 0.535);\n\n      const originalWidth = this.sprite.texture.width;\n      const originalHeight = this.sprite.texture.height;\n      const scaleX = (this.args.width * 1.5) / originalWidth;\n      const scaleY = (this.args.height * 1.5) / originalHeight;\n      const uniformScale = Math.max(scaleX, scaleY);\n\n      this.sprite.scale.set(uniformScale, uniformScale);\n      this.sprite.zIndex = this.transform.zIndex;\n\n      this.container = new Container();\n      this.container.sortableChildren = true;\n      this.container.zIndex = this.transform.zIndex;\n\n      this.healthContainer = new Container();\n      this.healthContainer.sortableChildren = true;\n\n      this.healthContainer.zIndex = 1;\n      this.healthContainer.position.y = -this.args.height / 2 - 30;\n\n      this.gfx = drawBox(\n        { width: this.args.width, height: this.args.height },\n        { stroke }\n      );\n\n      this.gfxHitBox = drawCircle(\n        { radius: this.args.width / 2 + 120 },\n        { fill: \"red\", fillAlpha: 1, strokeAlpha: 0 }\n      );\n\n      this.gfxHitBox!.zIndex = -1;\n      this.gfxHealthAmount = drawBox(\n        {\n          width:\n            (this.mobData.value.health / this.args.maxHealth) *\n              this.args.width +\n            50,\n          height: 20,\n        },\n        { fill: \"red\", fillAlpha: 1, strokeAlpha: 0 }\n      );\n\n      this.gfxHealthBorder = drawBox(\n        { width: this.args.width + 50, height: 20 },\n        {\n          fill: \"white\",\n          stroke: \"black\",\n          fillAlpha: 1,\n          strokeAlign: 1,\n          strokeWidth: 4,\n        }\n      );\n\n      this.healthContainer.addChild(this.gfxHealthBorder);\n      this.healthContainer.addChild(this.gfxHealthAmount);\n\n      this.container.addChild(this.gfx);\n      this.container.addChild(this.gfxHitBox);\n      this.container.addChild(this.healthContainer);\n      if (this.sprite) stage().addChild(this.sprite);\n      stage().addChild(this.container);\n\n      this.transform.addZIndexListener(() => {\n        if (this.container) this.container.zIndex = this.transform.zIndex;\n      });\n    }\n  }\n\n  public override bounds(): Bounds | undefined {\n    const { width, height } = this.args;\n    return { width, height };\n  }\n\n  public override isPointInside(point: Vector): boolean {\n    const { width, height } = this.args;\n    return simpleBoundsTest({ width, height }, this.transform, point);\n  }\n\n  public override onArgsUpdate(\n    path: ArgsPath<Args>,\n    previous: PreviousArgs<Args>\n  ): void {\n    if (path === \"width\" || path === \"height\") {\n      const { width: originalWidth, height: originalHeight } = previous;\n      const { width, height } = this.args;\n\n      const scaleX = width / originalWidth;\n      const scaleY = height / originalHeight;\n\n      Matter.Body.setAngle(this.body, 0);\n      Matter.Body.scale(this.body, scaleX, scaleY);\n      Matter.Body.setAngle(this.body, toRadians(this.transform.rotation));\n\n      this.gfx?.redraw(this.args);\n      this.gfxHitBox?.redraw({ radius: this.args.width / 2 + 120 });\n      this.gfxHealthBorder?.redraw({ width: this.args.width + 50, height: 20 });\n\n      if (this.healthContainer)\n        this.healthContainer.position.y = -this.args.height / 2 - 30;\n\n      if (this.sprite) {\n        this.sprite.width = width;\n        this.sprite.height = height;\n      }\n    }\n  }\n\n  public override onResize(bounds: Bounds): void {\n    this.args.width = bounds.width;\n    this.args.height = bounds.height;\n  }\n\n  public override teardown(): void {\n    physics().unregister(this, this.body);\n    this.container?.destroy({ children: true });\n    this.sprite?.destroy();\n\n    magicEvents().common.removeListener(\"onPlayerAttack\", this.onPlayerAttack);\n    magicEvents().client?.removeListener(\n      \"onPlayerCollisionStart\",\n      this.onPlayerCollisionStart\n    );\n\n    if (this.onHitServer)\n      this.netServer?.removeCustomMessageListener(\n        this.HIT_CHANNEL,\n        this.onHitServer\n      );\n  }\n\n  public override async onPhysicsStep(_: Time): Promise<void> {\n    if (game().client) return;\n\n    Matter.Body.setAngle(this.body, 0);\n    Matter.Body.setAngularVelocity(this.body, 0);\n\n    this.mobData.value.hitCooldown = Math.max(\n      0,\n      this.mobData.value.hitCooldown - 1\n    );\n    this.mobData.value.directionCooldown = Math.max(\n      0,\n      this.mobData.value.directionCooldown - 1\n    );\n\n    let closestPlayer: Matter.Body | null = null;\n    let minDistance = Number.POSITIVE_INFINITY;\n\n    const searchArea = {\n      min: { x: this.body.position.x - 5_000, y: this.body.position.y - 5_000 },\n      max: { x: this.body.position.x + 5_000, y: this.body.position.y + 5_000 },\n    };\n\n    const playerBodies = game().entities.flatMap((entity) =>\n      isNetPlayer(entity) && entity.body ? [entity.body] : []\n    );\n    const playersInRegion = Matter.Query.region(playerBodies, searchArea);\n\n    for (const player of playersInRegion) {\n      const dx = player.position.x - this.body.position.x;\n      const dy = player.position.y - this.body.position.y;\n      const distanceSquared = dx * dx + dy * dy;\n\n      if (distanceSquared < minDistance) {\n        minDistance = distanceSquared;\n        closestPlayer = player;\n      }\n    }\n\n    minDistance = Math.sqrt(minDistance);\n\n    if (this.mobData.value.hitCooldown > 0) {\n      this.mobData.value.currentAnimation = \"recoil\";\n    } else if (closestPlayer && minDistance < 150) {\n      this.mobData.value.currentAnimation = \"punch\";\n    } else if (this.mobData.value.currentAnimation !== \"walk\") {\n      this.mobData.value.currentAnimation = \"walk\";\n    }\n\n    if (closestPlayer && minDistance < 2_000) {\n      const verticalDistance = Math.abs(\n        closestPlayer.position.y - this.body.position.y\n      );\n      const horizontalDistance = Math.abs(\n        closestPlayer.position.x - this.body.position.x\n      );\n\n      if (\n        verticalDistance < horizontalDistance &&\n        this.mobData.value.directionCooldown === 0\n      ) {\n        this.mobData.value.direction =\n          closestPlayer.position.x > this.body.position.x ? 1 : -1;\n        this.mobData.value.directionCooldown = 1;\n      }\n\n      Matter.Body.translate(this.body, {\n        x: this.args.speed * this.mobData.value.direction,\n        y: 0,\n      });\n    } else {\n      // patrol back and fourth when player is far from entity\n      if (this.mobData.value.patrolDistance > this.patrolDistance) {\n        this.mobData.value.patrolDistance = 0;\n        this.mobData.value.direction *= -1;\n      }\n\n      Matter.Body.translate(this.body, {\n        x: (this.args.speed / 2) * this.mobData.value.direction,\n        y: 0,\n      });\n\n      this.mobData.value.patrolDistance += Math.abs(this.args.speed / 2);\n    }\n\n    if (!closestPlayer || minDistance > 5_000) {\n      game().destroy(this as SpawnableEntity);\n    }\n  }\n\n  public override onRenderFrame(_: RenderTime): void {\n    const pos = Vec.add(this.transform.position, camera().offset);\n\n    if (this.sprite) {\n      this.sprite.scale.x = -this.mobData.value.direction;\n\n      this.sprite.position = pos;\n      if (\n        this.sprite.textures !==\n        this.zombieAnimations[this.mobData.value.currentAnimation]\n      ) {\n        this.sprite.textures =\n          this.zombieAnimations[this.mobData.value.currentAnimation]!;\n        this.sprite.gotoAndPlay(0);\n      }\n    }\n\n    if (this.container) {\n      this.container.position = pos;\n      this.container.angle = this.transform.rotation;\n    }\n\n    const alpha = debug() ? 0.5 : 0;\n    if (this.gfx) this.gfx.alpha = alpha;\n    if (this.gfxHitBox)\n      this.gfxHitBox.alpha =\n        this.mobData.value.hitCooldown === 0 ? alpha / 3 : 0;\n\n    this.gfxHealthAmount?.redraw({\n      width:\n        (this.mobData.value.health / this.args.maxHealth) * this.args.width +\n        50,\n      height: 20,\n    });\n  }\n}\n", "import type { InitShared } from \"@dreamlab.gg/core/sdk\";\nimport { ParticleSpawner } from \"./entities/particleSpawner.ts\";\nimport { RegionManager } from \"./entities/regionManager.ts\";\nimport {\n  GrappleHook,\n  GrappleHookArgs,\n} from \"./entities/spawnable/grappleHook.ts\";\nimport { InventoryItemArgs, Item } from \"./entities/spawnable/inventoryItem.ts\";\nimport {\n  SpawnRegion,\n  SpawnRegionArgs,\n} from \"./entities/spawnable/spawnRegion.ts\";\nimport { Zombie, ZombieArgs } from \"./entities/spawnable/zombie.ts\";\n\nexport const sharedInit: InitShared = async (game) => {\n  game.register(\"@cvz/ZombieMob\", Zombie, ZombieArgs);\n  game.register(\"@cvz/Hook\", GrappleHook, GrappleHookArgs);\n  game.register(\"@cvz/SpawnRegion\", SpawnRegion, SpawnRegionArgs);\n  game.register(\"@cvz/InventoryItem\", Item, InventoryItemArgs);\n\n  game.instantiate(new ParticleSpawner());\n  game.instantiate(new RegionManager());\n};\n", "import type { Game } from \"@dreamlab.gg/core\";\nimport type { Player } from \"@dreamlab.gg/core/dist/entities\";\nimport type { InputCode } from \"@dreamlab.gg/core/dist/input\";\nimport { renderUI, useGame, usePlayer } from \"@dreamlab.gg/ui/react\";\nimport type { CSSProperties, FC } from \"https://esm.sh/react@18.2.0\";\nimport { useState } from \"https://esm.sh/react@18.2.0\";\nimport { InventoryApp } from \"../inventory/inventoryApp.tsx\";\nimport { GameScreen } from \"./gameScreen.tsx\";\nimport { ItemScreen } from \"./itemPopup.tsx\";\nimport { styles } from \"./styles.ts\";\n\nexport interface StartScreenProps {\n  game: Game<false>;\n  player: Player;\n}\n\nconst StartScreen: FC = () => {\n  const game = useGame();\n  const player = usePlayer();\n\n  const [hovered, setHovered] = useState(false);\n  const [active, setActive] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n\n  const handlePlayClick = async () => {\n    setGameStarted(true);\n  };\n\n  const getButtonStyles = (hover: boolean, active: boolean): CSSProperties => {\n    const style: CSSProperties = { ...styles.button };\n    if (active) {\n      style.transform = \"translateY(2px)\";\n      style.boxShadow = \"1px 1px 0px #7f462c\";\n    }\n\n    if (hover) {\n      style.backgroundColor = \"#a52a2a\";\n      style.color = \"#ffffff\";\n      style.borderColor = \"#7f0000\";\n      style.boxShadow = \"0 0 10px 3px #ff0000\";\n      style.textShadow = \"0 0 5px #ff0000, 0 0 10px #ff0000\";\n    }\n\n    return style;\n  };\n\n  if (player && gameStarted) {\n    return <GameScreen game={game} player={player} />;\n  }\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.backgroundAnimation} />\n      <div style={styles.content}>\n        {!player ? (\n          <div style={getButtonStyles(hovered, active)}>Loading...</div>\n        ) : (\n          <button\n            onClick={handlePlayClick}\n            onMouseDown={() => setActive(true)}\n            onMouseEnter={() => setHovered(true)}\n            onMouseLeave={() => {\n              setHovered(false);\n              setActive(false);\n            }}\n            onMouseUp={() => setActive(false)}\n            style={getButtonStyles(hovered, active)}\n            type=\"button\"\n          >\n            Play\n          </button>\n        )}\n      </div>\n      <div style={styles.versionLabel}>Alpha Version</div>\n    </div>\n  );\n};\n\nexport const initializeUI = (game: Game<false>) => {\n  const registerInput = (input: string, name: string, defaultKey: InputCode) =>\n    game.client?.inputs.registerInput(input, name, defaultKey);\n\n  const digits = Array.from({ length: 9 }, (_, index) => \"digit\" + (index + 1));\n  const keys: InputCode[] = [\n    \"KeyE\",\n    ...Array.from(\n      { length: 9 },\n      (_, index) => `Digit${index + 1}` as InputCode\n    ),\n  ];\n  const inputNames = [\n    \"Open Inventory\",\n    ...digits.map((digit) => `Select ${digit}`),\n  ];\n\n  for (const [index, input] of [\"open\", ...digits].entries()) {\n    const key = keys[index];\n    const name = inputNames[index];\n    if (key && name) {\n      registerInput(`@inventory/${input}`, name, key);\n    }\n  }\n\n  registerInput(\"@survival/pickup\", \"Item Pickup\", \"KeyF\");\n\n  renderUI(\n    game,\n    <>\n      <StartScreen />\n      <InventoryApp />\n      <ItemScreen game={game} item={undefined} />\n    </>\n  );\n};\n", "import { useInput, usePlayer } from \"@dreamlab.gg/ui/react\";\nimport type { FC } from \"https://esm.sh/react@18.2.0\";\nimport { useCallback, useEffect, useState } from \"https://esm.sh/react@18.2.0\";\nimport { events } from \"../events.ts\";\nimport type { InventoryClickEvent } from \"./events/inventoryClickEvent.ts\";\nimport type {\n  InventoryDragEndEvent,\n  InventoryDragStartEvent,\n} from \"./events/inventoryDragEvent.ts\";\nimport Inventory from \"./inventory.tsx\";\nimport InventoryHotbar from \"./inventoryHotbar.tsx\";\nimport InventoryManager from \"./inventoryManager.ts\";\nimport { handleInventoryClick } from \"./listeners/inventoryClick.ts\";\nimport {\n  handleInventoryDragEnd,\n  handleInventoryDragStart,\n} from \"./listeners/inventoryDrag.ts\";\n\nconst isAttackAnimation = (currentAnimation: string) => {\n  switch (currentAnimation) {\n    case \"greatsword\":\n    case \"punch\":\n    case \"bow\":\n    case \"shoot\":\n      return true;\n    default:\n      return false;\n  }\n};\n\nexport const InventoryApp: FC = () => {\n  const player = usePlayer();\n  const [inventoryData, setInventoryData] = useState(\n    InventoryManager.getInstance().getInventoryData()\n  );\n\n  const [activeSlot, setActiveSlot] = useState<number>(0);\n  const [isInventoryOpen, setIsInventoryOpen] = useState(false);\n  const [sourceSlot, setSourceSlot] = useState<number | null>(null);\n\n  const commonEventProps = {\n    inventoryData,\n    activeSlot,\n  };\n\n  const onInventoryOpen = useCallback(\n    (pressed: boolean) => {\n      if (!pressed) return;\n      setIsInventoryOpen((prev) => !prev);\n    },\n    [setIsInventoryOpen]\n  );\n\n  const onInventoryDigits = useCallback(\n    (digit: number, pressed: boolean) => {\n      if (!pressed || !player) return;\n      if (isAttackAnimation(player.currentAnimation)) return;\n      const idx = digit - 1;\n      setActiveSlot(idx);\n      player.gear = inventoryData[idx]?.baseGear;\n    },\n    [player, inventoryData, setActiveSlot]\n  );\n\n  useEffect(() => {\n    const updateInventory = () => {\n      const invData = InventoryManager.getInstance().getInventoryData();\n      setInventoryData([...invData]);\n      if (player) player.gear = invData[activeSlot]?.baseGear;\n    };\n\n    events.addListener(\"onInventoryUpdate\", updateInventory);\n\n    return () => {\n      events.removeListener(\"onInventoryUpdate\", updateInventory);\n    };\n  }, [activeSlot, inventoryData, player]);\n\n  useInput(\"@inventory/open\", onInventoryOpen);\n  for (let index = 0; index <= 9; index++) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useInput(`@inventory/digit${index}`, (va: boolean) =>\n      onInventoryDigits(index, va)\n    );\n  }\n\n  const handleClick = (slotIndex: number) => {\n    const event: InventoryClickEvent = {\n      ...commonEventProps,\n      cursorSlot: slotIndex,\n    };\n    handleInventoryClick(event);\n  };\n\n  const handleDragStartEvent = (slotIndex: number) => {\n    const event: InventoryDragStartEvent = {\n      ...commonEventProps,\n      cursorSlot: slotIndex,\n      setSourceSlot,\n    };\n    handleInventoryDragStart(event);\n  };\n\n  const handleDragEndEvent = (slotIndex: number) => {\n    if (sourceSlot === null || !player) return;\n    if (sourceSlot === slotIndex) {\n      setSourceSlot(null);\n      return;\n    }\n\n    InventoryManager.getInstance().swapItems(sourceSlot, slotIndex);\n    setInventoryData([...InventoryManager.getInstance().getInventoryData()]);\n\n    const event: InventoryDragEndEvent = {\n      ...commonEventProps,\n      player,\n      cursorSlot: slotIndex,\n      sourceSlot,\n      targetSlot: slotIndex,\n    };\n    handleInventoryDragEnd(event);\n\n    setSourceSlot(null);\n  };\n\n  return (\n    <>\n      {!player ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          <InventoryHotbar\n            activeSlot={activeSlot}\n            inventoryData={inventoryData}\n          />\n          {isInventoryOpen && (\n            <Inventory\n              data={inventoryData}\n              onClick={handleClick}\n              onDragEnd={handleDragEndEvent}\n              onDragStart={handleDragStartEvent}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n", "import React, { useState } from \"https://esm.sh/react@18.2.0\";\nimport type { InventoryItem } from \"./inventoryManager.ts\";\nimport { inventoryStyles as styles } from \"./inventoryStyle.ts\";\n\ninterface Props {\n  slot: InventoryItem;\n}\n\nconst InventorySlot: React.FC<Props> = ({ slot }) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const combinedStyles = {\n    ...styles.inventorySlot,\n    ...(isHovered ? styles.inventorySlotHover : {}),\n    border: slot ? \"2px solid #9e8a7c\" : \"2px solid transparent\",\n  };\n\n  const renderTooltipContent = () => {\n    if (!slot?.baseGear) return null;\n\n    const { baseGear: baseItem, damage, range } = slot;\n    const { displayName, speedMultiplier } = baseItem;\n\n    return (\n      <div>\n        <div>{displayName}</div>\n        <div>Damage: {damage}</div>\n        {slot.baseGear.animationName === \"greatsword\" && (\n          <div>Range: {range}</div>\n        )}\n        <div>Attack Speed: {speedMultiplier ?? 1}</div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      onDragEnd={() => setIsDragging(false)}\n      onDragStart={() => setIsDragging(true)}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      style={combinedStyles}\n    >\n      {slot?.baseGear?.textureURL && (\n        <img\n          alt={slot.baseGear?.displayName}\n          className=\"inventorySprite\"\n          draggable\n          height=\"50\"\n          src={slot.baseGear?.textureURL}\n          width=\"50\"\n        />\n      )}\n      {isHovered && !isDragging && (\n        <div style={{ ...styles.itemTooltip, opacity: 1 }}>\n          {renderTooltipContent()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InventorySlot;\n", "import type { CSSProperties } from 'https://esm.sh/react@18.2.0'\n\nexport const inventoryStyles: Record<string, CSSProperties> = {\n  inventory: {\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'column',\n    border: '3px solid #5b4b4b',\n    width: '475px',\n    backgroundColor: 'rgba(44, 42, 41, 0.9)',\n    padding: '10px',\n    borderRadius: '15px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    fontFamily: \"'Courier New', Courier, monospace\",\n  },\n  inventoryTitle: {\n    color: '#9e8a7c',\n    textAlign: 'center',\n    marginBottom: '10px',\n    fontSize: '24px',\n    fontWeight: 'bold',\n    textShadow: '1px 1px 2px #7f0000',\n  },\n  inventoryRow: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: '5px',\n  },\n  inventorySlot: {\n    width: '50px',\n    height: '50px',\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    position: 'relative',\n    transition: 'background-color 0.3s ease, transform 0.3s ease',\n    borderRadius: '8px',\n  },\n  inventorySlotHover: {\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    transform: 'scale(1.05)',\n  },\n  inventoryHotbarSlots: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: '10px',\n    borderTop: '2px solid #9e8a7c',\n    paddingTop: '10px',\n  },\n  hotbarSlots: {\n    display: 'flex',\n    justifyContent: 'center',\n    background: '#9e8a7c',\n    borderRadius: '8px',\n    padding: '5px 0',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.5)',\n  },\n  itemTooltip: {\n    position: 'absolute',\n    zIndex: 1_000,\n    top: '0',\n    right: '0',\n    transform: 'translateX(100%) translateY(-100%)',\n    padding: '8px 12px',\n    borderRadius: '6px',\n    backgroundColor: 'rgba(21, 32, 43, 0.9)',\n    color: 'rgba(255, 255, 255, 0.95)',\n    fontSize: '0.875rem',\n    lineHeight: '1.4',\n    pointerEvents: 'none',\n    whiteSpace: 'nowrap',\n    boxShadow:\n      '0px 0px 10px rgba(0, 0, 0, 0.5), 0px 20px 20px rgba(0, 0, 0, 0.25)',\n    border: '1px solid rgba(255, 255, 255, 0.1)',\n    transition: 'opacity 0.2s ease-out',\n    opacity: 0,\n  },\n}\n", "import React from \"https://esm.sh/react@18.2.0\";\nimport type { InventoryData, InventoryItem } from \"./inventoryManager.ts\";\nimport InventorySlot from \"./inventorySlot.tsx\";\nimport { inventoryStyles as styles } from \"./inventoryStyle.ts\";\n\ninterface Props {\n  data: InventoryData;\n  onClick(slotIndex: number): void;\n  onDragStart(slotIndex: number): void;\n  onDragEnd(slotIndex: number): void;\n}\n\nconst chunkArray = (array: InventoryData, size: number) => {\n  const result = [];\n  for (let index = 0; index < array.length; index += size) {\n    result.push(array.slice(index, index + size));\n  }\n\n  return result;\n};\n\nconst Inventory: React.FC<Props> = ({\n  data,\n  onClick,\n  onDragStart,\n  onDragEnd,\n}) => {\n  const numCols = 9;\n  const chunkedData = chunkArray(data, numCols);\n\n  const createSlot = (\n    slot: InventoryItem | undefined,\n    slotIndex: number,\n    offset = 0\n  ) => {\n    const index = offset + slotIndex;\n    return (\n      <div\n        draggable={Boolean(slot)}\n        key={slotIndex}\n        onClick={() => onClick(index)}\n        onDragOver={(ev) => ev.preventDefault()}\n        onDragStart={(ev) => {\n          if (!slot) {\n            ev.preventDefault();\n            return;\n          }\n\n          onDragStart(index);\n        }}\n        onDrop={() => onDragEnd(index)}\n        style={styles.inventorySlot}\n      >\n        {slot && <InventorySlot slot={slot} />}\n      </div>\n    );\n  };\n\n  return (\n    <div style={styles.inventory}>\n      <h2 style={styles.inventoryTitle}>Inventory</h2>\n      {chunkedData.slice(1).map((row, rowIndex) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <div key={rowIndex} style={styles.inventoryRow}>\n          {row.map((slot, slotIndex) =>\n            createSlot(slot, slotIndex, (rowIndex + 1) * numCols)\n          )}\n        </div>\n      ))}\n      <div style={styles.inventoryHotbarSlots}>\n        {chunkedData[0]?.map((slot, slotIndex) => createSlot(slot, slotIndex))}\n      </div>\n    </div>\n  );\n};\n\nexport default Inventory;\n", "import React from \"react\";\nimport type { InventoryData } from \"./inventoryManager.ts\";\nimport { inventoryStyles as styles } from \"./inventoryStyle.ts\";\n\ninterface InventoryHotbarProps {\n  readonly inventoryData: InventoryData;\n  readonly activeSlot: number;\n}\n\nconst InventoryHotbar: React.FC<InventoryHotbarProps> = ({\n  inventoryData,\n  activeSlot,\n}) => {\n  const firstRow = inventoryData.slice(0, 9);\n\n  const slotStyle: React.CSSProperties = {\n    ...styles.inventorySlot,\n    margin: \"0 3px\",\n    transition: \"transform 0.3s ease\",\n  };\n\n  const activeSlotStyle: React.CSSProperties = {\n    ...slotStyle,\n    boxShadow: \"0 0 10px #7f0000\",\n    transform: \"scale(1.1)\",\n    zIndex: 10,\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.hotbarSlots,\n        position: \"fixed\",\n        bottom: \"10px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {firstRow.map((item, index) => {\n        return (\n          <div\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            style={index === activeSlot ? activeSlotStyle : slotStyle}\n          >\n            {item?.baseGear ? (\n              <img\n                alt={item.baseGear.displayName}\n                src={item.baseGear.textureURL}\n                style={{ width: \"100%\", height: \"100%\" }}\n              />\n            ) : (\n              <div style={{ ...slotStyle }} />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default InventoryHotbar;\n", "import type { InventoryClickEvent } from \"../events/inventoryClickEvent.ts\";\n\nexport const handleInventoryClick = (event: InventoryClickEvent) => {\n  console.log(`Slot at [${event.cursorSlot}] was clicked`);\n};\n", "import type {\n  InventoryDragEndEvent,\n  InventoryDragStartEvent,\n} from \"../events/inventoryDragEvent.ts\";\nimport InventoryManager from \"../inventoryManager.ts\";\n\nexport const handleInventoryDragStart = (event: InventoryDragStartEvent) => {\n  console.log(`Started dragging from slot [${event.cursorSlot}]`);\n  event.setSourceSlot(event.cursorSlot);\n};\n\nexport const handleInventoryDragEnd = (event: InventoryDragEndEvent) => {\n  const invData = InventoryManager.getInstance().getInventoryData();\n  console.log(\n    `Ended dragging from slot [${event.sourceSlot}] to slot [${event.targetSlot}]`\n  );\n\n  if (!event.player) return;\n\n  if (event.activeSlot === event.sourceSlot) {\n    event.player.gear = invData[event.sourceSlot]?.baseGear;\n  } else if (event.activeSlot === event.targetSlot) {\n    event.player.gear = invData[event.targetSlot]?.baseGear;\n  }\n};\n", "import type { FC } from \"https://esm.sh/react@18.2.0\";\nimport { useEffect, useState } from \"https://esm.sh/react@18.2.0\";\nimport { events } from \"../events.ts\";\nimport PlayerManager from \"../playerDataManager.ts\";\nimport { DeathScreen } from \"./deathScreen.tsx\";\nimport type { StartScreenProps } from \"./startScreen.tsx\";\nimport { styles } from \"./styles.ts\";\n\nexport const GameScreen: FC<StartScreenProps> = ({ game, player }) => {\n  const playerManager = PlayerManager.getInstance();\n  const [score, setScore] = useState(playerManager.getScore());\n  const [gold, setGold] = useState(playerManager.getGold());\n  const [health, setHealth] = useState(playerManager.getHealth());\n  const [showDamage, setShowDamage] = useState(false);\n\n  useEffect(() => {\n    const scoreListener = (newScore: number) => {\n      playerManager.addScore(newScore);\n      setScore(playerManager.getScore());\n\n      const goldToAdd = Math.floor(Math.random() * (newScore / 2));\n      playerManager.addGold(goldToAdd);\n      setGold(playerManager.getGold());\n    };\n\n    const goldListener = () => {\n      setGold(playerManager.getGold());\n    };\n\n    const healthListener = (healthChange: number, isHealing = false) => {\n      if (isHealing) playerManager.addHealth(healthChange);\n      else playerManager.removeHealth(healthChange);\n      setHealth(playerManager.getHealth());\n      setShowDamage(true);\n      setTimeout(() => setShowDamage(false), 300);\n    };\n\n    const damageListener = (healthChange: number) =>\n      healthListener(healthChange);\n\n    const healListener = (healthChange: number) =>\n      healthListener(healthChange, true);\n\n    events.addListener(\"onPlayerScore\", scoreListener);\n    events.addListener(\"onPlayerDamage\", damageListener);\n    events.addListener(\"onPlayerHeal\", healListener);\n    events.addListener(\"onGoldUpdate\", goldListener);\n\n    return () => {\n      events.removeListener(\"onPlayerScore\", scoreListener);\n      events.removeListener(\"onPlayerDamage\", damageListener);\n      events.removeListener(\"onPlayerHeal\", healListener);\n      events.removeListener(\"onGoldUpdate\", goldListener);\n    };\n  }, [playerManager]);\n\n  const handleStartOver = async () => {\n    playerManager.setHealth(playerManager.getMaxHealth());\n\n    setHealth(playerManager.getHealth());\n    player.teleport({ x: 0, y: 500 }, true);\n  };\n\n  return (\n    <>\n      {showDamage && (\n        <div style={{ ...styles.damageOverlay, opacity: showDamage ? 1 : 0 }} />\n      )}\n      {health <= 0 ? (\n        <DeathScreen game={game} onStartOver={handleStartOver} score={score} />\n      ) : (\n        <>\n          <div style={styles.healthContainer}>\n            {Array.from({ length: playerManager.getMaxHealth() }).map(\n              (_, index) => (\n                <span\n                  key={`heart-${playerManager.getMaxHealth() - index}`}\n                  style={{\n                    ...styles.heartIcon,\n                    opacity: index < health ? 1 : 0.3,\n                  }}\n                >\n                  \u2764\uFE0F\n                </span>\n              )\n            )}\n          </div>\n          <div style={styles.gameScreenContainer}>\n            <div style={styles.scoreContainer}>\n              <span style={styles.gameScreenLabel}>Score:</span>\n              <span style={styles.score}>{score}</span>\n            </div>\n            <div style={styles.scoreContainer}>\n              <span style={styles.gameScreenLabel}>\uD83E\uDE99</span>\n              <span style={styles.score}>{gold}</span>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n", "// TODO: refactor?\nimport { events } from \"./events.ts\";\n\nconst MAX_HEALTH = 10;\nconst INITIAL_SCORE = 0;\nconst INITIAL_GOLD = 500;\n\nclass PlayerManager {\n  private static instance: PlayerManager;\n  private health: number;\n  private score: number;\n  private gold: number;\n\n  private constructor() {\n    this.health = MAX_HEALTH;\n    this.score = INITIAL_SCORE;\n    this.gold = INITIAL_GOLD;\n  }\n\n  public static getInstance(): PlayerManager {\n    if (!PlayerManager.instance) {\n      PlayerManager.instance = new PlayerManager();\n    }\n\n    return PlayerManager.instance;\n  }\n\n  // Health\n  public getHealth(): number {\n    return this.health;\n  }\n\n  public getMaxHealth(): number {\n    return MAX_HEALTH;\n  }\n\n  public setHealth(amount: number): void {\n    this.health = Math.min(MAX_HEALTH, Math.max(0, amount));\n  }\n\n  public addHealth(amount: number): void {\n    this.health = Math.min(MAX_HEALTH, this.health + amount);\n  }\n\n  public removeHealth(amount: number): void {\n    this.health = Math.max(0, this.health - amount);\n  }\n\n  // Score\n  public getScore(): number {\n    return this.score;\n  }\n\n  public setScore(amount: number): void {\n    this.score = Math.max(0, amount);\n  }\n\n  public addScore(amount: number): void {\n    this.score += amount;\n  }\n\n  public removeScore(amount: number): void {\n    this.score = Math.max(0, this.score - amount);\n  }\n\n  // Gold\n  public getGold(): number {\n    return this.gold;\n  }\n\n  public setGold(amount: number): void {\n    this.gold = Math.max(0, amount);\n    events.emit(\"onGoldUpdate\");\n  }\n\n  public addGold(amount: number): void {\n    this.gold += amount;\n    events.emit(\"onGoldUpdate\");\n  }\n\n  public removeGold(amount: number): void {\n    this.gold = Math.max(0, this.gold - amount);\n    events.emit(\"onGoldUpdate\");\n  }\n}\n\nexport default PlayerManager;\n", "import type { Game } from \"@dreamlab.gg/core\";\nimport type { CSSProperties, FC } from \"https://esm.sh/react@18.2.0\";\nimport { useState } from \"https://esm.sh/react@18.2.0\";\nimport { styles } from \"./styles.ts\";\n\ninterface DeathScreenProps {\n  game: Game<false>;\n  score: number;\n  onStartOver(): void;\n}\n\nexport const DeathScreen: FC<DeathScreenProps> = ({ score, onStartOver }) => {\n  const [hovered, setHovered] = useState(false);\n  const [active, setActive] = useState(false);\n\n  const getButtonStyles = (): CSSProperties => {\n    const style: CSSProperties = { ...styles.button };\n\n    if (active) {\n      style.transform = \"scale(0.95)\";\n    }\n\n    if (hovered) {\n      style.transform = \"scale(1.1)\";\n      style.boxShadow = \"0 0 15px #9d9d9d\";\n    }\n\n    return style;\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.dealthOverlay} />\n      <div style={styles.content}>\n        <div style={styles.title}>You Died</div>\n        <div style={{ ...styles.scoreContainer, marginBottom: \"20px\" }}>\n          <span style={styles.gameScreenLabel}>Score:</span>\n          <span style={styles.score}>{score}</span>\n        </div>\n        <button\n          onClick={onStartOver}\n          onMouseDown={() => setActive(true)}\n          onMouseEnter={() => setHovered(true)}\n          onMouseLeave={() => {\n            setHovered(false);\n            setActive(false);\n          }}\n          onMouseUp={() => setActive(false)}\n          style={getButtonStyles()}\n          type=\"button\"\n        >\n          Play Again\n        </button>\n      </div>\n    </div>\n  );\n};\n", "import type { CSSProperties } from 'https://esm.sh/react@18.2.0'\n\nexport const styles: { [key: string]: CSSProperties } = {\n  pickupOverlay: {\n    position: 'absolute',\n    top: '10%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.75)',\n    borderRadius: '10px',\n    boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.5)',\n    padding: '8px',\n    width: 'auto',\n    height: 'auto',\n  },\n  itemAddedOverlay: {\n    position: 'absolute',\n    bottom: '10%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    borderRadius: '10px',\n    padding: '10px',\n    boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.5)',\n    backgroundColor: 'rgba(0, 128, 0, 0.75)',\n  },\n  itemTexture: {\n    width: '80px',\n    height: '80px',\n    objectFit: 'cover',\n    borderRadius: '50%',\n    marginBottom: '10px',\n  },\n  itemInfo: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  itemName: {\n    fontSize: '16px',\n    color: 'white',\n    fontWeight: 'bold',\n    marginBottom: '5px',\n  },\n  loreSection: {\n    backgroundColor: 'rgba(245, 222, 179, 0.9)',\n    color: '#654321',\n    fontFamily: \"'Courier New', Courier, monospace\",\n    border: '1px solid #8B4513',\n    borderRadius: '10px',\n    boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.5)',\n    overflowY: 'auto',\n    textShadow: '1px 1px 2px #DEB887',\n    margin: '10px 0',\n    textAlign: 'justify',\n    lineHeight: '1.5',\n    maxWidth: '300px',\n    fontSize: '12px',\n    padding: '10px',\n  },\n  statsSection: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: 'rgba(128, 64, 0, 0.8)',\n    padding: '8px',\n    margin: '5px 0',\n    borderRadius: '8px',\n    boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.5)',\n  },\n  statName: {\n    fontSize: '14px',\n    color: '#FFD700',\n    fontWeight: 'bold',\n    marginBottom: '3px',\n  },\n  statValue: {\n    fontSize: '14px',\n    color: 'white',\n    marginBottom: '3px',\n  },\n  pickupPrompt: {\n    fontSize: '12px',\n    color: 'white',\n    fontStyle: 'italic',\n  },\n  gameScreenLabel: {\n    fontSize: '28px',\n    marginRight: '10px',\n    fontWeight: 'bold',\n  },\n  healthContainer: {\n    position: 'absolute',\n    bottom: '75px',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n    maxWidth: '600px',\n    alignItems: 'center',\n    zIndex: 10,\n  },\n  heartIcon: {\n    fontSize: '24px',\n    color: 'red',\n  },\n  scoreContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  score: {\n    fontSize: '28px',\n    marginRight: '10px',\n    fontWeight: 'bold',\n  },\n  zombieIcon: {\n    fontSize: '28px',\n  },\n  gameOverOverlay: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.85)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n    zIndex: 2,\n  },\n  damageOverlay: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    background: `radial-gradient(circle at center, transparent, transparent 40%, rgba(255, 0, 0, 0.7) 100%)`,\n    transition: 'opacity 0.5s ease-in-out',\n    opacity: 0,\n    pointerEvents: 'none',\n  },\n  gameScreenContainer: {\n    position: 'absolute',\n    top: '10%',\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n    pointerEvents: 'none',\n    background: 'transparent',\n  },\n  gameScreenTitle: {\n    fontSize: '32px',\n    color: 'white',\n    textShadow: '2px 2px 4px black',\n  },\n  dealthOverlay: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundImage: `\n        radial-gradient(circle at 10% 20%, rgba(255, 0, 0, 0.8), transparent 50%),\n        radial-gradient(circle at 80% 10%, rgba(255, 0, 0, 0.8), transparent 50%),\n        radial-gradient(circle at 20% 80%, rgba(255, 0, 0, 0.8), transparent 50%),\n        radial-gradient(circle at 85% 90%, rgba(255, 0, 0, 0.8), transparent 50%)`,\n  },\n  title: {\n    fontSize: '48px',\n    color: 'white',\n    textShadow: '2px 2px 4px black',\n    marginBottom: '20px',\n  },\n  container: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    background: '#1a1a1a',\n    pointerEvents: 'auto',\n    zIndex: 15,\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    zIndex: 1,\n  },\n  button: {\n    padding: '10px 25px',\n    fontSize: '35px',\n    fontWeight: 'bold',\n    color: '#3a2502',\n    backgroundColor: '#c19a6b',\n    border: '2px solid #7f462c',\n    borderRadius: '0',\n    cursor: 'pointer',\n    textShadow: '1px 1px 0px #fff6dc',\n    boxShadow: '3px 3px 0px #7f462c',\n    fontFamily: \"'Courier New', Courier, monospace\",\n    transition: 'all 0.2s ease-in-out',\n  },\n  backgroundAnimation: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundImage:\n      'url(\"https://s3-assets.dreamlab.gg/uploaded-from-editor/background-1702293365691.jpg\")',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n  },\n  versionLabel: {\n    position: 'absolute',\n    bottom: '10px',\n    right: '10px',\n    color: 'white',\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    padding: '5px 10px',\n    borderRadius: '5px',\n    fontSize: '14px',\n    fontWeight: 'bold',\n    zIndex: 1_000,\n  },\n}\n", "import type { Game } from \"@dreamlab.gg/core\";\nimport type { Player } from \"@dreamlab.gg/core/dist/entities\";\nimport { usePlayer } from \"@dreamlab.gg/ui/dist/react\";\nimport type { FC } from \"https://esm.sh/react@18.2.0\";\nimport { useEffect, useRef, useState } from \"https://esm.sh/react@18.2.0\";\nimport { events } from \"../events.ts\";\nimport type { InventoryItem } from \"../inventory/inventoryManager.ts\";\nimport InventoryManager from \"../inventory/inventoryManager.ts\";\nimport PlayerManager from \"../playerDataManager.ts\";\nimport { styles } from \"./styles.ts\";\n\ninterface ItemPopupProps {\n  game: Game<false>;\n  item: InventoryItem | undefined;\n}\n\nexport const ItemScreen: FC<ItemPopupProps> = ({ game, item }) => {\n  const player = usePlayer();\n  const [purchaseComplete, setPurchaseComplete] = useState(false);\n  const [awaitingConfirmation, setAwaitingConfirmation] = useState(false);\n  const [prompt, setPrompt] = useState(\"\");\n  const [currentItem, setCurrentItem] = useState<InventoryItem | undefined>(\n    item\n  );\n  const itemRef = useRef<InventoryItem | undefined>(item);\n  const playerManager = PlayerManager.getInstance();\n  const inventoryManager = InventoryManager.getInstance();\n\n  useEffect(() => {\n    const itemListener = (\n      _player: Player,\n      newItem: InventoryItem | undefined\n    ) => {\n      itemRef.current = newItem;\n      setCurrentItem(newItem);\n      setPurchaseComplete(false);\n      setAwaitingConfirmation(false);\n      setPrompt(\n        `Press F to buy ${newItem?.baseGear?.displayName} for ${newItem?.value}\uD83E\uDE99`\n      );\n    };\n\n    const itemConfirmListener = (keyDown: boolean) => {\n      if (!keyDown) {\n        // ignore if key up, only respond to key down\n        return;\n      }\n\n      const itemToPickup = itemRef.current;\n      if (itemToPickup) {\n        if (\n          itemToPickup.value &&\n          itemToPickup.value > 0 &&\n          !awaitingConfirmation &&\n          !purchaseComplete\n        ) {\n          setPrompt(\n            `Confirm purchase of ${itemToPickup.baseGear?.displayName} for ${itemToPickup.value}\uD83E\uDE99? Press F again to confirm.`\n          );\n          setAwaitingConfirmation(true);\n        } else if (\n          itemToPickup.value &&\n          itemToPickup.value > 0 &&\n          awaitingConfirmation &&\n          !purchaseComplete\n        ) {\n          setPurchaseComplete(true);\n          if (playerManager.getGold() >= itemToPickup.value) {\n            playerManager.removeGold(itemToPickup.value);\n            inventoryManager.addItemToInventory(itemToPickup);\n            setPrompt(\"Item Purchased!\");\n          } else {\n            setPrompt(\"Not enough \uD83E\uDE99.\");\n          }\n\n          setAwaitingConfirmation(false);\n        } else {\n          if (!purchaseComplete)\n            inventoryManager.addItemToInventory(itemToPickup);\n          setPrompt(\"Item Purchased!\");\n        }\n      }\n    };\n\n    events.addListener(\"onPlayerNearItem\", itemListener);\n    game.client.inputs.addListener(\"@survival/pickup\", itemConfirmListener);\n\n    return () => {\n      events.removeListener(\"onPlayerNearItem\", itemListener);\n      game.client.inputs.removeListener(\n        \"@survival/pickup\",\n        itemConfirmListener\n      );\n    };\n  }, [\n    game.client.inputs,\n    player,\n    playerManager,\n    inventoryManager,\n    awaitingConfirmation,\n    purchaseComplete,\n  ]);\n\n  if (!currentItem) return null;\n  const overlayStyle = styles.pickupOverlay;\n  const promptMessage = prompt;\n\n  return (\n    <div style={overlayStyle}>\n      <div style={styles.itemInfo}>\n        <span style={styles.itemName}>{currentItem.baseGear?.displayName}</span>\n        <div style={styles.statsSection}>\n          <span style={styles.statName}>Stats:</span>\n          <span style={styles.statValue}>Damage: {currentItem.damage}</span>\n          {currentItem.baseGear.animationName === \"greatsword\" && (\n            <span style={styles.statValue}>Range: {currentItem.range}</span>\n          )}\n        </div>\n        <span style={styles.loreSection}>{currentItem.lore}</span>\n        <span style={styles.pickupPrompt}>{promptMessage}</span>\n      </div>\n    </div>\n  );\n};\n"],
  "mappings": "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",
  "names": ["Entity", "game", "onlyNetClient", "Matter", "Entity", "onlyNetClient", "game", "Matter", "resolve", "game", "Matter", "game", "Matter", "debug", "camera", "game", "Solid", "SolidArgs", "Vec", "z", "ArgsSchema", "SolidArgs", "z", "Solid", "game", "Vec", "camera", "camera", "game", "magicEvents", "Solid", "SolidArgs", "z", "ArgsSchema", "SolidArgs", "z", "Solid", "game", "magicEvents", "camera", "camera", "debug", "game", "magicEvents", "physics", "z", "Vec", "onlyNetClient", "onlyNetServer", "syncedValue", "drawCircle", "Matter", "ArgsSchema", "z", "syncedValue", "Matter", "onlyNetServer", "game", "onlyNetClient", "physics", "magicEvents", "drawCircle", "Vec", "camera", "debug", "game", "ArgsSchema", "usePlayer", "useState", "useState", "jsx", "jsxs", "jsx", "jsx", "jsxs", "useState", "useEffect", "useState", "useState", "jsx", "jsxs", "useState", "Fragment", "jsx", "jsxs", "game", "useState", "useEffect", "usePlayer", "useEffect", "useState", "jsx", "jsxs", "game", "usePlayer", "useState", "useEffect", "Fragment", "jsx", "jsxs", "game", "usePlayer", "useState", "active", "game"]
}
